// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Telegram Web App API
const isTelegramEnvironment = window.Telegram && window.Telegram.WebApp;

let tg;
if (isTelegramEnvironment) {
    // –†–µ–∞–ª—å–Ω—ã–π Telegram Web App API
    tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();
} else {
    // Mock –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    tg = {
        ready: () => console.log('Mock: Telegram WebApp ready'),
        expand: () => console.log('Mock: Telegram WebApp expand'),
        sendData: (data) => console.log('Mock sendData:', data),
        close: () => console.log('Mock close'),
        showPopup: (options) => console.log('Mock showPopup:', options)
    };
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
let selectedVideoId = null;
let currentCategory = 'all';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL —Ö—ç—à–∞
function getCategoryFromHash() {
    return 'all';
}
window.botParams = {
    bot_id: null,
    user_id: null,
    message_id: null,
    saved: false
};
// Function to save bot parameters from URL
function saveBotParamsFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    
    window.botParams.bot_id = urlParams.get('bot');
    window.botParams.user_id = urlParams.get('user');
    window.botParams.message_id = urlParams.get('message');
    window.botParams.saved = true;
    
    console.log('=== BOT PARAMETERS SAVED ===');
    console.log('Bot ID:', window.botParams.bot_id);
    console.log('User ID:', window.botParams.user_id);
    console.log('Message ID:', window.botParams.message_id);
    console.log('=== END SAVE ===');
    
    // Also save to localStorage as backup
    try {
        localStorage.setItem('botParams', JSON.stringify(window.botParams));
    } catch (e) {
        console.warn('Could not save to localStorage:', e);
    }
    
    return window.botParams;
}

function loadBotParams() {
    // First try to get from global variable
    if (window.botParams && window.botParams.saved) {
        console.log('Loading bot params from global variable');
        return window.botParams;
    }
    
    // Fallback to localStorage
    try {
        const saved = localStorage.getItem('botParams');
        if (saved) {
            window.botParams = JSON.parse(saved);
            console.log('Loading bot params from localStorage');
            return window.botParams;
        }
    } catch (e) {
        console.warn('Could not load from localStorage:', e);
    }
    
    // If nothing found, return empty params
    console.log('No bot params found');
    return {
        bot_id: null,
        user_id: null,
        message_id: null,
        saved: false
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ
function createVideoPreview(video) {
    const previewElement = document.createElement('div');
    previewElement.className = 'video-preview';
    previewElement.setAttribute('data-id', video.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "new" —É –≤–∏–¥–µ–æ
    const hasNewCategory = video.categories && video.categories.includes('new');
    const newBadge = hasNewCategory ? '<div class="new-badge">NEW</div>' : '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const duration = video.duration || 0;
    const minutes = Math.floor(duration / 60);
    const seconds = duration % 60;
    const formattedDuration = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–≤—å—é –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
    previewElement.innerHTML = `
        <div class="video-container">
            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
            <div class="loading-indicator" style="display: none;">
                <div class="loading-spinner"></div>
                <div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            
            <!-- –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏) -->
            <div class="preview-placeholder" style="
                width: 100%; 
                height: 100%; 
                background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
                display: flex;
                align-items: center;
                justify-content: center;
                color: #666;
                font-size: 14px;
            ">
                üì± –ó–∞–≥—Ä—É–∑–∏—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
            </div>
            
            <!-- –°—Ç–∞—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏) -->
            <img class="preview-image lazy-load" 
                 data-src="${video.preview_image || ''}" 
                 alt="${video.title}" 
                 style="display: none;">
            
            <!-- Overlay —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–µ–≤—å—é) -->
            <div class="error-overlay" style="display: none;">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-text">–ü—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>
            </div>
            
            <div class="video-duration">${formattedDuration}</div>
            ${newBadge}
            <div class="likes-container">
                <div class="like-display">
                    <span class="like-icon">‚ù§Ô∏è</span>
                    <span class="like-count">${video.likes || 0}</span>
                </div>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ
    previewElement.addEventListener('click', () => {
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å 'selected' —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.video-preview').forEach(el => el.classList.remove('selected'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'selected' —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        previewElement.classList.add('selected');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ localStorage
        localStorage.setItem('selectedVideoId', video.id);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        window.location.href = `video.html?id=${video.id}&category=${currentCategory}`;
    });
    
    return previewElement;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
function updateLikeButton(button, videoId) {
    const icon = button.querySelector('.like-icon');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è isVideoLiked —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const isLiked = (typeof isVideoLiked === 'function') ? isVideoLiked(videoId) : false;
    
    if (isLiked) {
        icon.textContent = '‚ô•'; // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–¥–µ—á–∫–æ
        button.classList.add('like-active');
        button.title = '–£–±—Ä–∞—Ç—å –ª–∞–π–∫';
    } else {
        icon.textContent = '‚ô°'; // –ü—É—Å—Ç–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ
        button.classList.remove('like-active');
        button.title = '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
function updateFavoriteButton(button, videoId) {
    const icon = button.querySelector('.favorite-icon');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è isVideoFavorite —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const isFavorite = (typeof isVideoFavorite === 'function') ? isVideoFavorite(videoId) : false;
    
    if (isFavorite) {
        icon.textContent = '‚òÖ'; // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–≤–µ–∑–¥–∞
        button.classList.add('favorite-active');
        button.title = '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ';
    } else {
        icon.textContent = '‚òÜ'; // –ü—É—Å—Ç–∞—è –∑–≤–µ–∑–¥–∞
        button.classList.remove('favorite-active');
        button.title = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –ª–∞–π–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateAllLikeCounters(videoId) {
    if (typeof getVideoLikes !== 'function') return;
    
    const newLikeCount = getVideoLikes(videoId);
    const likeCounters = document.querySelectorAll(`[data-video-id="${videoId}"] + .like-count, .like-count`);
    
    likeCounters.forEach(counter => {
        counter.textContent = newLikeCount;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function createCategoryButtons() {
    const categoriesContainer = document.getElementById('categories');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    categoriesContainer.innerHTML = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è categories —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof categories === 'undefined') {
        console.error('categories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    Object.keys(categories).forEach(categoryKey => {
        const category = categories[categoryKey];
        const button = document.createElement('button');
        button.className = 'category-button';
        button.setAttribute('data-category', categoryKey);
        
        if (categoryKey === currentCategory) {
            button.classList.add('active');
        }
        
        button.innerHTML = `
            <span class="icon">${category.icon}</span>
            <span>${category.name}</span>
        `;
        
        button.addEventListener('click', () => {
            switchCategory(categoryKey);
        });
        
        categoriesContainer.appendChild(button);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function switchCategory(categoryKey) {
    currentCategory = categoryKey;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.category-button').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-category="${categoryKey}"]`).classList.add('active');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    loadVideoGrid().then(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        setTimeout(() => {
            updateLazyLoading();
        }, 100);
    });
    
    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryKey}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –≤–∏–¥–µ–æ
async function loadVideoGrid() {
    const videoGridElement = document.getElementById('videoGrid');
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    videoGridElement.innerHTML = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if (typeof videoData !== 'undefined' && Array.isArray(videoData)) {
        // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let videosToShow = [];
        
        if (typeof getVideosByCategory === 'function') {
            videosToShow = getVideosByCategory(currentCategory);
        } else {
            // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            console.warn('getVideosByCategory –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ');
            videosToShow = videoData;
        }
        
        if (videosToShow.length === 0) {
            if (currentCategory === 'favorites') {
                videoGridElement.innerHTML = '<p class="no-videos">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.<br>–î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∞–≤ –Ω–∞ ‚≠ê</p>';
            } else {
                videoGridElement.innerHTML = '<p class="no-videos">üî• –°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç –≥–æ—Ä—è—á–æ! üî•<br><span class="coming-soon">–ù–æ–≤—ã–µ –≤–∏–¥–µ–æ —É–∂–µ –≥–æ—Ç–æ–≤—è—Ç—Å—è...</span></p>';
            }
            return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        videosToShow.forEach(video => {
            const previewElement = createVideoPreview(video);
            videoGridElement.appendChild(previewElement);
        });
    } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        videoGridElement.innerHTML = '<p class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    const savedVideoId = localStorage.getItem('selectedVideoId');
    if (savedVideoId) {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
        const element = document.querySelector(`.video-preview[data-id="${savedVideoId}"]`);
        if (element) {
            element.classList.add('selected');
            selectedVideoId = savedVideoId;
        }
    }
}
// === –°–ò–°–¢–ï–ú–ê –õ–ï–ù–ò–í–û–ô –ó–ê–ì–†–£–ó–ö–ò ===

// Intersection Observer –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é
let lazyLoadObserver = null;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
function initLazyLoading() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Intersection Observer
    if (!('IntersectionObserver' in window)) {
        console.warn('IntersectionObserver –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É');
        loadAllImagesImmediately();
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
    lazyLoadObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                loadPreviewImage(entry.target);
                lazyLoadObserver.unobserve(entry.target);
            }
        });
    }, {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ 200px –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        rootMargin: '200px',
        threshold: 0.1
    });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –ø—Ä–µ–≤—å—é —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    document.querySelectorAll('.video-preview').forEach(element => {
        lazyLoadObserver.observe(element);
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function loadPreviewImage(previewElement) {
    const previewImage = previewElement.querySelector('.preview-image.lazy-load');
    const loadingIndicator = previewElement.querySelector('.loading-indicator');
    const placeholder = previewElement.querySelector('.preview-placeholder');
    const errorOverlay = previewElement.querySelector('.error-overlay');
    
    if (!previewImage || !previewImage.dataset.src) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    placeholder.style.display = 'none';
    loadingIndicator.style.display = 'flex';
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    previewImage.addEventListener('load', function() {
        console.log(`–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${previewImage.src}`);
        loadingIndicator.style.display = 'none';
        previewImage.style.display = 'block';
    }, { once: true });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    previewImage.addEventListener('error', function() {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é: ${previewImage.src}`);
        loadingIndicator.style.display = 'none';
        errorOverlay.style.display = 'flex';
    }, { once: true });
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (5 —Å–µ–∫—É–Ω–¥)
    const timeout = setTimeout(() => {
        if (loadingIndicator.style.display !== 'none') {
            console.warn(`–ü—Ä–µ–≤—å—é –¥–æ–ª–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: ${previewImage.dataset.src}`);
            loadingIndicator.style.display = 'none';
            errorOverlay.style.display = 'flex';
        }
    }, 5000);
    
    // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    previewImage.addEventListener('load', () => clearTimeout(timeout), { once: true });
    previewImage.addEventListener('error', () => clearTimeout(timeout), { once: true });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    previewImage.src = previewImage.dataset.src;
    previewImage.classList.remove('lazy-load');
}

// Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Intersection Observer
function loadAllImagesImmediately() {
    document.querySelectorAll('.video-preview').forEach(previewElement => {
        loadPreviewImage(previewElement);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
function updateLazyLoading() {
    if (lazyLoadObserver) {
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –Ω–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        document.querySelectorAll('.video-preview:not([data-observed])').forEach(element => {
            element.setAttribute('data-observed', 'true');
            lazyLoadObserver.observe(element);
        });
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–µ—Ç–∫—É –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    saveBotParamsFromURL();

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ URL —Ö—ç—à–∞
        const hashCategory = getCategoryFromHash();
        if (hashCategory !== 'all') {
            currentCategory = hashCategory;
        }
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ Cloud Storage (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if (typeof loadFavoritesFromCloud === 'function') {
            await loadFavoritesFromCloud();
        } else {
            console.warn('loadFavoritesFromCloud –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        }
        
        createCategoryButtons();
        await loadVideoGrid();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        setTimeout(() => {
            initLazyLoading();
        }, 100);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        
        // Fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º –±–µ–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        createCategoryButtons();
        await loadVideoGrid();
        
        // –í—Å–µ —Ä–∞–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
        setTimeout(() => {
            initLazyLoading();
        }, 100);
    }
}); 