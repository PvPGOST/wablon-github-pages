#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Inline Web App
"""

from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import requests
import urllib.parse

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8496910136:AAEoOuBdpzJyE_Cv6pgTvET3JSuEM9nSfWM"

class WebAppHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            self.send_response(200)
            self.send_header('Content-Type', 'text/html; charset=utf-8')
            self.end_headers()
            
            html = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>ü§ñ Web App Server</title>
                <meta charset="utf-8">
                <style>
                    body { font-family: Arial, sans-serif; background: #1a1a1a; color: white; padding: 20px; }
                    .status { background: #2a2a2a; padding: 20px; border-radius: 10px; margin: 20px 0; }
                    .success { color: #4CAF50; }
                    .info { color: #2196F3; }
                </style>
            </head>
            <body>
                <h1>ü§ñ Telegram Web App Server</h1>
                <div class="status">
                    <h2 class="success">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!</h2>
                    <p><strong>Endpoint:</strong> <code>/api/web-app-data</code></p>
                    <p><strong>–ú–µ—Ç–æ–¥:</strong> POST</p>
                    <p><strong>–ü–æ—Ä—Ç:</strong> 8000</p>
                </div>
                
                <div class="status">
                    <h3 class="info">üì° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram:</h3>
                    <p>1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok: <code>ngrok http 8000</code></p>
                    <p>2. –ó–∞–º–µ–Ω–∏—Ç–µ URL –≤ video.js –Ω–∞ HTTPS –∞–¥—Ä–µ—Å –æ—Ç ngrok</p>
                    <p>3. –û–±–Ω–æ–≤–∏—Ç–µ GitHub Pages</p>
                </div>
                
                <div class="status">
                    <h3>üîß –õ–æ–≥–∏:</h3>
                    <p>–°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å Python –¥–ª—è –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤</p>
                </div>
            </body>
            </html>
            """
            self.wfile.write(html.encode('utf-8'))
        else:
            self.send_error(404, "Not found")
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Mini App"""
        if self.path == '/api/web-app-data':
            try:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                
                print("=" * 50)
                print("üî• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ MINI APP:")
                print("=" * 50)
                print(f"Data: {json.dumps(data, indent=2, ensure_ascii=False)}")
                
                query_id = data.get('query_id')
                template_data = data.get('template_data', {})
                
                if not query_id:
                    self.send_error(400, "Missing query_id")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
                video_path = template_data.get('videoPath', '–ù–µ —É–∫–∞–∑–∞–Ω')
                display_name = template_data.get('displayName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                
                # –í—ã–∑—ã–≤–∞–µ–º answerWebAppQuery
                self.answer_web_app_query(query_id, video_path, display_name)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                self.send_response(200)
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                
                response = {"status": "success", "message": "Data processed"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                self.send_error(500, str(e))
        else:
            self.send_error(404, "Not found")
    
    def answer_web_app_query(self, query_id, video_path, display_name):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ answerWebAppQuery"""
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerWebAppQuery"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
            result = {
                "type": "article",
                "id": "selected_template",
                "title": "–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω",
                "description": f"–®–∞–±–ª–æ–Ω: {display_name}",
                "input_message_content": {
                    "message_text": f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {display_name}\nüìÅ –ü—É—Ç—å: {video_path}\n\nüîß –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ..."
                }
            }
            
            payload = {
                "web_app_query_id": query_id,
                "result": result
            }
            
            print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answerWebAppQuery...")
            print(f"URL: {url}")
            print(f"Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}")
            
            response = requests.post(url, json=payload)
            
            if response.status_code == 200:
                print("‚úÖ answerWebAppQuery —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                print(f"Response: {response.text}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ answerWebAppQuery: {response.status_code}")
                print(f"Response: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ answerWebAppQuery: {e}")

def run_server(port=8000):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_address = ('', port)
    httpd = HTTPServer(server_address, WebAppHandler)
    
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üì° Endpoint: http://localhost:{port}/api/web-app-data")
    print("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ Telegram –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok:")
    print(f"   ngrok http {port}")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    run_server()