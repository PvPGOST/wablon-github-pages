#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Mini App (aiogram 3)
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install aiogram
"""

import asyncio
import json
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather
BOT_TOKEN = "8496910136:AAEoOuBdpzJyE_Cv6pgTvET3JSuEM9nSfWM"

# URL –≤–∞—à–µ–≥–æ Mini App
MINI_APP_URL = "https://pvpgost.github.io/wablon-github-pages/index.html"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–∞–∫ –≤—ã —Ö–æ—Ç–µ–ª–∏)
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="üé¨ –ì–û–¢–û–í–´–ï –®–ê–ë–õ–û–ù–´",
            web_app=WebAppInfo(url=MINI_APP_URL)
        )
    )
    builder.add(
        InlineKeyboardButton(
            text="‚ùì –ü–û–ú–û–©–¨",
            callback_data="help"
        )
    )
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É
    
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ üé¨ –ì–û–¢–û–í–´–ï –®–ê–ë–õ–û–ù–´ - –≤—ã–±—Ä–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–±–ª–æ–Ω
‚Ä¢ ‚ùì –ü–û–ú–û–©–¨ - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
"""
    
    await message.answer(
        welcome_text,
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline –∫–Ω–æ–ø–∫–∏ –ü–û–ú–û–©–¨"""
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
    
    await callback.message.edit_text(
        text="üôè –ë–û–ì –í –ü–û–ú–û–©–¨!\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Mini App —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
    )

@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
        web_app_data = message.web_app_data.data
        
        print("=" * 50)
        print("üî• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ MINI APP (aiogram 3):")
        print("=" * 50)
        print(f"Raw data: {web_app_data}")
        
        # –ü–∞—Ä—Å–∏–º JSON
        data = json.loads(web_app_data)
        print(f"Parsed JSON: {json.dumps(data, indent=2, ensure_ascii=False)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—à–∏ –ø–æ–ª—è
        video_path = data.get('videoPath', '–ù–µ —É–∫–∞–∑–∞–Ω')
        display_name = data.get('displayName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        print(f"Video Path: {video_path}")
        print(f"Display Name: {display_name}")
        print("=" * 50)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response_text = f"""
‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Mini App! (aiogram 3)

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ:
‚Ä¢ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: `{video_path}`
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {display_name}

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
```json
{json.dumps(data, indent=2, ensure_ascii=False)}
```

–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ.
"""
        
        await message.answer(
            response_text,
            parse_mode='Markdown'
        )
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {web_app_data}")
        
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App:\n`{str(e)}`",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )

@dp.inline_query()
async def handle_inline_query(inline_query: types.InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Web App (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö
    pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Web App Query (—ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Inline Web Apps!)
async def handle_web_app_query(query_id: str, data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Inline Web App —á–µ—Ä–µ–∑ answerWebAppQuery"""
    try:
        print("=" * 50)
        print("üî• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ INLINE WEB APP:")
        print("=" * 50)
        print(f"Query ID: {query_id}")
        print(f"Data: {data}")
        
        video_path = data.get('videoPath', '–ù–µ —É–∫–∞–∑–∞–Ω')
        display_name = data.get('displayName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        print(f"Video Path: {video_path}")
        print(f"Display Name: {display_name}")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
        from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
        
        result = InlineQueryResultArticle(
            id="selected_template",
            title="–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω",
            description=f"–®–∞–±–ª–æ–Ω: {display_name}",
            input_message_content=InputTextMessageContent(
                message_text=f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {display_name}\nüìÅ –ü—É—Ç—å: {video_path}\n\nüîß –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            )
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ answerWebAppQuery
        await bot.answer_web_app_query(
            web_app_query_id=query_id,
            result=result
        )
        
        print("‚úÖ answerWebAppQuery –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ handle_web_app_query: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
from aiohttp import web, ClientSession
import json

async def web_app_data_endpoint(request):
    """HTTP endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App"""
    try:
        data = await request.json()
        query_id = data.get('query_id')
        template_data = data.get('template_data', {})
        
        if query_id:
            await handle_web_app_query(query_id, template_data)
            return web.Response(text="OK")
        else:
            return web.Response(text="Missing query_id", status=400)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ web_app_data_endpoint: {e}")
        return web.Response(text=str(e), status=500)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ MINI_APP_URL –Ω–∞ URL –≤–∞—à–µ–≥–æ Mini App")
        return
    
    print("üöÄ –ë–æ—Ç (aiogram 3) –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print(f"üîó Mini App URL: {MINI_APP_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")